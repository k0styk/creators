# location /etc/nginx/sites-enabled/filename
upstream socket_nodes {
  ip_hash;
  server localhost:8000;
  server localhost:8001;
  server localhost:8002;
}

server {
  listen 80;
  listen [::]:80;
  error_log /home/creator/nginx_error_log;

  root /home/creator/git/build;
  index index.html index.htm index.nginx-debian.html;

  server_name creators.emergent.su;

  listen 443 ssl; # managed by Certbot

  # RSA certificate
  ssl_certificate /etc/letsencrypt/live/creators.emergent.su/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/creators.emergent.su/privkey.pem; # managed by Certbot

  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

  # Redirect non-https traffic to https
  if ($scheme != "https") {
    return 301 https://$host$request_uri;
  } # managed by Certbot

  location ~ ^/(chat|api|auth)/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Cookie $http_cookie;
    proxy_set_header 'Access-Control-Allow-Origin' '*';

    proxy_pass http://localhost:8000;
  }

  location ~ ^/(socket.io)/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Cookie $http_cookie;

    proxy_pass http://socket_nodes;

    # enable WebSockets
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # Any route that doesn't have a file extension (e.g. /devices)
  location / {
    try_files $uri $uri/ /index.html;
  }

  location ~ ^/(public)/ {
    root /mnt/f/git/creators/backend;
  }

  # Any route containing a file extension (e.g. /devicesfile.js)
  location ~ ^.+\..+$ {
    try_files $uri =404;
  }

  location ~* \.(?:manifest|appcache|html?|xml|json)$ {
    expires -1;
    # access_log logs/static.log; # I don't usually include a static log
  }

  location ~* \.(?:css|js)$ {
    try_files $uri =404;
    expires 1y;
    access_log off;
    add_header Cache-Control "public";
  }
}

# OLD VERSION
# upstream socket_nodes {
#     ip_hash;
#     server localhost:8000;
#     server localhost:8001;
#     server localhost:8002;
# }

# server {
#     server_name socket.test;

#     location / {
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header Host $host;
#         proxy_set_header X-Forwarded-Proto $scheme;

#         proxy_pass http://localhost:3000;

#     }

#     location ~ ^/(sockjs-node)/ {
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header Host $host;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header Cookie $http_cookie;

#         proxy_pass http://localhost:3000;
#     }

#     location ~ ^/(chat|api|auth)/ {
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header Host $host;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header Cookie $http_cookie;

#         proxy_pass http://localhost:8000;
#     }

#     location ~ ^/(socket.io)/ {
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header Host $host;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header Cookie $http_cookie;

#         proxy_pass http://socket_nodes;

#         # enable WebSockets
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#     }
# }